import csvimport package_class# this is used to ascertain whether values passed to it are valid floatsdef is_float(value):    try:        float(value)        return True    except ValueError:        return False# this function reads through the WGUPS package CVS file, then 'loads' it into the hash tabledef loadPackageData(fileName, hashTable):    with open(fileName, newline='') as packageDataCSV:        packageData = csv.reader(packageDataCSV, delimiter=',')        next(packageData)  # this skips the header        for packageInfo in packageData:            packageID = int(packageInfo[0])            packageAddress = packageInfo[1]            packageCity = packageInfo[2]            packageState = packageInfo[3]            packageZIP = packageInfo[4]            packageDeadline = packageInfo[5]            packageWeight = packageInfo[6]            packageStatus = "at hub"            # creates new Package object            newPackage = package_class.Package(                packageID,                packageAddress,                packageCity,                packageState,                packageZIP,                packageDeadline,                packageWeight,                packageStatus            )            # inserts newly created Package object into a previously defined hash table with its unique ID            hashTable.insert(packageID, newPackage)# this function reads through a provided file containing distance data, parses its, then loads it into a listdef loadDistanceData(fileName, list):    with open(fileName, newline='') as distanceDataCSV:        distanceData = csv.reader(distanceDataCSV, delimiter=',', dialect='unix')        #TODO: Attempting to skip the header data and ONLY save float numbers to list        for distanceInfo in distanceData:            if any(isinstance(value, str) and not is_float(value) for value in distanceInfo):                continue  # this skips the header??        # next(distanceData) # having these here makes a difference TODO: use this to help create AddressList?        # loop through the distanceDataCSV and add  the data to distanceDataList one row at a time        for distanceInfo in distanceData:            filtered_row = [float(value) for value in distanceInfo if (value != '' and is_float(value))]            list.append(filtered_row)# code block for creating an increasing 2D listi = 1maxRows = 10arr = []while i < maxRows:    arr.append([0 for i in range(i)])    # print(arr)    i += 1