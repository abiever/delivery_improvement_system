import csvimport package_class# this method is used to ascertain whether values passed to it are valid floatsdef is_float(value):    try:        float(value)        return True    except ValueError:        return False# this method takes a hashTable and packageID as arguments and returns the correct package from that hashtabledef hashTableLookUp(hashTable, packageID):    return hashTable.search(packageID)# this function reads through the WGUPS package CVS file, then 'loads' it into the hash tabledef loadPackageData(fileName, hashTable):    with open(fileName, newline='') as packageDataCSV:        packageData = csv.reader(packageDataCSV, delimiter=',')        next(packageData)  # this skips the header        for packageInfo in packageData:            packageID = int(packageInfo[0])            packageAddress = packageInfo[1]            packageCity = packageInfo[2]            packageState = packageInfo[3]            packageZIP = packageInfo[4]            packageDeadline = packageInfo[5]            packageWeight = packageInfo[6]            packageStatus = "at hub"            # creates new Package object            newPackage = package_class.Package(                packageID,                packageAddress,                packageCity,                packageState,                packageZIP,                packageDeadline,                packageWeight,                packageStatus            )            # inserts newly created Package object into a previously defined hash table with its unique ID            hashTable.insert(packageID, newPackage)# this function reads through a provided file containing distance data, parses its, then loads it into the provided listdef loadDistanceData(fileName, list):    with open(fileName, newline='') as distanceDataCSV:        distanceData = csv.reader(distanceDataCSV, delimiter=',', dialect='unix')        # loops through the distanceDataCSV and appends only the necessary distance data to distanceDataList one row at a time        for distanceInfo in distanceData:            filtered_row = [float(value) for value in distanceInfo if (value != '' and is_float(value))]            if len(filtered_row) != 0:                list.append(filtered_row)# this function reads through a provided file containing address data, parses its, then loads it into the provided listdef loadAddressData(fileName, list):    with open(fileName, newline='') as addressDataCSV:        addressData = csv.reader(addressDataCSV, delimiter=',', dialect='unix')        for addressInfo in addressData:            # This isn't ideal, but it gets the job done by only appending the data from arrays that DON'T have floats            # in them and only have a length of 2. Appends just the data after the first occurrence of an integer            # which is the necessary part of the address information            if not any(isinstance(element, float) for element in addressInfo) and len(addressInfo) == 2:                # Split the address and keep everything after the first space                index_of_first_digit = next((index for index, char in enumerate(addressInfo[0]) if char.isdigit()), None)                # If a digit is found, extract the substring after the first digit                if index_of_first_digit is not None:                    address_part = addressInfo[0][index_of_first_digit:]                    list.append(address_part)def displayMenu():    print("Welcome to the WGUPS User Console! What would you like to do?")    print("1. Report ALL Package Information & Truck Mileage")    print("2. View Delivery Status of a Specific Package at a Given Time")    print("3. View Status of ALL Packages at a Given Time")    print("4. Exit")